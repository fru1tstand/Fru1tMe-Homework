$tasklist-width: $width-small;
$task-height: 60px;
$task-tag-width: $task-height;
$task-tag-color-width: 8px;
$task-tag-space: $task-tag-color-width;

$tag-color-size: 14px;

$timescope-height: 24px;

/* Useful for later... */
.tasklist-transition-group {
	@include transition(height $default-transition-time $default-transition-pattern,
			background-color 0.2s $default-transition-pattern);
}

/* Make sure we're all on the same boat */
.tasklist-viewstyle-container,
.tasklist-tag-container,
.tasklist-tag,
.tasklist-timescope-group,
.tasklist-task,
.tasklist-timescope-container,
.tasklist-timescope {
	width: $tasklist-width;
}

/* Contains an entire viewstyle */
.tasklist-viewstyle-container {
	@extend .noselect;
	padding-bottom: $split-screen-option-height;
	
	/* Content box? Psh. Fine. Spans it is. */
	label,
	label span {
		cursor: pointer;
		display: block;
	}
}

/* Input controllers and their respective toggles */
.tasklist-tag-container-controller,
.tasklist-timescope-container-controller {
	display: none; /* But secretly */
}
.tasklist-tag-container-toggle,
.tasklist-tag-container-toggle span,
.tasklist-timescope-container-toggle,
.tasklist-timescope-container-toggle span {
	display: block;
}

/* Those triangle things that move for visibility */
.visibility-toggle {
	@extend .fa;
	@extend .fa-caret-down;
	
	float: right;
	@include default-transition(transform);
}
.tasklist-tag-container-controller:checked + label .visibility-toggle ,
.tasklist-timescope-container-controller:checked + label .visibility-toggle  {
	@include transform(rotate(90deg));
}

/* Container for the tag display and toggle */
.tasklist-tag,
.tasklist-tag .visibility-toggle,
.tasklist-tag .title {
	height: $tag-color-size * 3;
	line-height: $tag-color-size * 3;
}
.tasklist-tag {
	@extend .tasklist-transition-group;
	
	font-size: 16px;
	
	.visibility-toggle {
		padding: 0 $tag-color-size;
	}
	.tag {
		float: left;
		margin: $tag-color-size;
		width: $tag-color-size;
		height: $tag-color-size;
	}
	.title {
		@extend .ellipsis;
		font-weight: bold;
	}
}

/* Timescope */
.tasklist-timescope {
	@extend .tasklist-transition-group;
	
	font-size: 12px;
	height: $timescope-height;
	overflow: hidden;
	padding: 0 5px;
	
	> span {
		height: $timescope-height;
		line-height: $timescope-height;
	}
	.count {
		float: left;
		font-weight: bold;
		
		&:before 	{ content: '('; }
		&:after 	{ content: ')'; }
	}
	.name {
		@extend .ellipsis;
		text-align: center;
		padding: 0 5px;
	}
}

/* An actual task */
.tasklist-task {
	@extend .tasklist-transition-group;
	
	height: $task-height;
	white-space: nowrap;
	overflow: hidden;
	font-size: 0;
	
	> div,
	.tasklist-task-toggle {
		display: inline-block;
		vertical-align: top;
		height: $task-height;
	}
	
	.tag {
		width: $task-tag-width;
		margin-right: -($task-tag-width - $task-tag-color-width);
		border-left: $task-tag-color-width solid;
	}
}

/* Task controller (shows task details) */
.tasklist-task-toggle {
	@extend .transition-margin;
	
	width: $tasklist-width - $task-tag-color-width;
	padding: 0 $task-tag-space;
		
	.title,
	.hierarchy {
		@extend .ellipsis;
		@extend .transition-width;
		
		width: $tasklist-width - $task-tag-color-width - $task-tag-space * 2;
	}
	
	.title {
		font-size: 14px;
	}
	.hierarchy {
		font-size: 10px;
		
		i {
			@extend .fa;
			@extend .fa-caret-right;
			padding: 0 3px;
		}
	}
	
	&:hover {
		margin-left: $task-tag-color-width;
		
		.title,
		.hierarchy {
			width: $tasklist-width 
					- $task-tag-color-width 
					- $task-tag-space * 2 
					- $task-tag-color-width * 2;
		}
	}
}

.tasklist-quickedit {
	@extend .transition-width;
	
	width: 0;
	overflow: hidden;
	a {
		@extend .tasklist-transition-group;
		
		height: $task-height;
		width: $task-height;
		display: inline-block;
	}
	
	i {
		@extend .fa;
		
		height: $task-height;
		width: $task-height;
		
		&::before,
		&::after {
			display: block;
			width: $task-height;
			text-align: center;
		}
		&::before {
			@include transition(margin 0.2s linear);
			
			font-size: 24px;
			height: 22px;
			margin-top: ($task-height - 24) / 2;
			margin-bottom: 0;
		}
		&::after {
			@include transition(opacity 0.5s $default-transition-pattern);

			font-size: 10px;
			opacity: 0;
		}
		
		&:hover {
			&::before {
				margin-top: (($task-height - 24) / 2) - 6;
				margin-bottom: 6px;
			}
			&::after {
				@include transition(opacity 0.5s $default-transition-pattern 0.1s);
				opacity: 1;
			}
		}
	}
	
	.complete {
		@extend .fa-check;
		
		&::after {
			content: "complete";
		}
	}
	.uncomplete {
		@extend .fa-times;
		
		&::after {
			content: "un-complete";
		}
	}
	.edit {
		@extend .fa-pencil;
		
		&::after {
			content: "edit";
		}
	}
	.delete {
		@extend .fa-trash;
		
		&::after {
			content: "delete";
		}
	}
}

/* Quick edit peek */
.tasklist-quickedit:hover,
.tasklist-task .tag:hover + .tasklist-quickedit {
	width: $task-height * 3;
}

/* Timescope collapse */
.tasklist-timescope-container > input:checked {
	~ .tasklist-task {
		height: 0;
	}
}

/* Tag collapse */
.tasklist-tag-container > input:checked {
	~ .tasklist-timescope-group .tasklist-task,
	~ .tasklist-timescope-group .tasklist-timescope {
		height: 0;
	}
}